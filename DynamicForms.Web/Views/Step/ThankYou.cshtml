@model ThankYouViewModel

@{
  ViewBag.Title = "Thank You";
}
<br /><br />
<div class="row">
  <div class="col-md-8">
    <div class="row">
      <div class="col-md-12">
        <div class="bs-callout bs-callout-section">
          <h3>@ViewBag.Title</h3>
          <p>Your application has been submitted and accepted.</p>
          <h4>Results</h4>
          <p class="scoring-outcome">Outcome: @Model.ScoringResult.Outcome</p>
          <p class="scoring-outcome-sentence">@Model.ScoringSentence</p>
          <h5>Points breakdown</h5>
          <table class="table breakdown breakdown-points">
            <thead>
              <tr>
                <th>Field</th>
                <th>Value</th>
                <th>Score</th>
              </tr>
            </thead>
            @foreach (var outlineItem in Model.ScoringResult.PointsOutline)
            {
              <tr>
                <td>@outlineItem.FieldLabel</td>
                <td>@outlineItem.FieldText</td>
                <td>@outlineItem.Score</td>
              </tr>
            }
            <tfoot>
              <tr>
                <th colspan="2">Total</th>
                <th>@Model.ScoringResult.Points</th>
              </tr>
            </tfoot>
          </table>

          <h5>Outcome breakdown</h5>
          <table class="table breakdown breakdown-outcome">
            <thead>
              <tr>
                <th>Range</th>
                <th>Outcome</th>
              </tr>
            </thead>
            @foreach (var outcomeOutlineItem in Model.ScoringResult.OutcomeOutline)
            {
              <tr class="@(outcomeOutlineItem.IsFinalOutcome ? GetOutcomeCssClass(outcomeOutlineItem) : string.Empty)">
                <td>@outcomeOutlineItem.Range.RangeAsString</td>
                <td>@RenderOutcome(outcomeOutlineItem)</td>
              </tr>
            }
          </table>
          <h5>API</h5>
          <p><a target="_blank" href="@($"{ApplicationSettings.DataApiUrl}application/{this.ApplicationFormContext.Application.ID}")">View data</a></p>
        </div>
      </div>
    </div>
  </div>
  <div class="col-md-4">
    <div class="bs-callout">
      <h4>Current configuration</h4>
      @{
        var configuration = ApplicationFormContext.Configuration;
      }
      <p>
        <strong>ID:</strong> @configuration.Group.ID <br />
        <strong>Version ID:</strong> @configuration.VersionID<br />
        <strong>Name:</strong> @configuration.Group.Name<br />
        <strong>Theme:</strong> @configuration.Settings.Brand.Theme<br />
        <strong>API: </strong> <a target="_blank" href="@($"{ApplicationSettings.ConfigurationApiUrl}Form/{configuration.Group.ID}/{configuration.VersionID}")">View configuration</a><br />
        <strong>API: </strong> <a target="_blank" href="@($"{ApplicationSettings.DataApiUrl}Application/{this.ApplicationFormContext.Application.ID}")">View data</a>
      </p>
    </div>
    <div class="bs-callout">
      <h4>We're here to help</h4>
      <button class="btn btn-default btn-lg">Chat now</button>
    </div>
  </div>
</div>

@helper RenderOutcome(ScoringOutcomeOutlineItem outcomeOutlineItem)
{
  if (outcomeOutlineItem.IsFinalOutcome)
  {
    <span class="label label-@GetOutcomeCssClass(outcomeOutlineItem)">@outcomeOutlineItem.Range.ScoringOutcome</span>
  }
  else
  {
    @outcomeOutlineItem.Range.ScoringOutcome
  }
}

@functions {
  string GetOutcomeCssClass(ScoringOutcomeOutlineItem outcomeOutlineItem)
  {
    switch (outcomeOutlineItem.Range.ScoringOutcome)
    {
      case ScoringOutcome.Pass:
        return "success";
      case ScoringOutcome.Warning:
        return "warning";
      case ScoringOutcome.Reject:
        return "danger";
    }

    return string.Empty;
  }
}